package org.usfirst.frc2337.RobotProject2016.commands;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.kauailabs.navx.frc.AHRS;

import org.usfirst.frc2337.RobotProject2016.Robot;
import org.usfirst.frc2337.RobotProject2016.RobotMap;

/**
 *
 */
public class Chassis_TankDrive extends Command {
	public double speed;
	public double Kp = 0.03;
	public double yaw;
	private Joystick joystickMain = Robot.oi.driverJoystick;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Chassis_TankDrive() {
    	requires(Robot.chassisPID);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if (joystickMain.getRawAxis(2) > 0.2) {
    		speed = Robot.oi.driverJoystick.getRawAxis(2);
        	yaw = RobotMap.gyro.getAngle();
        	speed = speed/2;
        	RobotMap.chassisDrive.drive(speed, yaw*Kp);
    	}
    	else {
    		RobotMap.gyro.reset();
    		double leftJoytick = joystickMain.getRawAxis(1);
	    	double rightJoytick = joystickMain.getRawAxis(5);
	    	double turnJoystick = joystickMain.getRawAxis(4);
	    	
	    	rightJoytick = rightJoytick * Math.abs(rightJoytick);
	    	leftJoytick = leftJoytick * Math.abs(leftJoytick);
	    	// Robot.chassis.tankDrive(leftJoytick, rightJoytick);
	    	 Robot.chassisPID.arcadeDrive(leftJoytick, turnJoystick);
	    	 SmartDashboard.putNumber(   "rightJoytick",             rightJoytick);
	    	 SmartDashboard.putNumber(   "leftJoytick",             leftJoytick);
	    	 SmartDashboard.putNumber(   "turnJoystick",             turnJoystick);
    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}