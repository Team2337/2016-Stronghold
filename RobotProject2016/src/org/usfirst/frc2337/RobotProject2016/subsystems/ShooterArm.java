// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2337.RobotProject2016.subsystems;

import org.usfirst.frc2337.RobotProject2016.RobotMap;
import org.usfirst.frc2337.RobotProject2016.commands.*;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class ShooterArm extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogPotentiometer shooterArmPot = RobotMap.shooterArmshooterArmPot;
    private final CANTalon shooterArmMotorA = RobotMap.shooterArmshooterArmMotorA;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon shooterArmMotorB = RobotMap.shooterArmshooterArmMotorB;
    
    private final double layupShot = 4;
    private final double hookShot = 3;
    private final double armSpeedUp = .2;
    private final double armSpeedDown = -.2;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new shooterArm_DoNothing());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    /**
     * Sets arm motor to raise the arm using armSpeedUp variable declared towards the top of the ShooterArm
     * Subsystem
     *    
    */
    public void armUp() {
    	shooterArmMotorA.set(armSpeedUp); 
    	shooterArmMotorB.set(armSpeedUp);
    }
    /**
     * Sets arm motor to lower the arm using armSpeedDown variable declared towards the top of the ShooterArm
     * Subsystem
     * 
     */
    public void armDown() {
    	shooterArmMotorA.set(armSpeedDown); 	
    	shooterArmMotorB.set(armSpeedDown); 
    }
    /**
     * positions shooter arm for Layup shot using layupShot variable declared towards the top of the ShooterArm
     * Subsystem
     */
    public void shooterLayup() {
    	shooterArmMotorA.setSetpoint(layupShot);
    	shooterArmMotorB.setSetpoint(layupShot);
    	}
    /**
     * positions shooter arm for hook shot using hookShot variable declared towards the top of the ShooterArm
     * Subsystem
     */
    public void shooterHookShot() {
    	shooterArmMotorA.setSetpoint(hookShot);
    	shooterArmMotorB.setSetpoint(hookShot);
    	}
    public void stopMotors() {
    	shooterArmMotorA.set(0);
    	shooterArmMotorB.set(0);
    }
    		
    }


