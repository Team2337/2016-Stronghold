// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2337.RobotProject2016.subsystems;

import org.usfirst.frc2337.RobotProject2016.commands.Chassis_TankDrive;
import org.usfirst.frc2337.RobotProject2016.RobotMap;
import org.usfirst.frc2337.RobotProject2016.commands.*;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.AnalogAccelerometer;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class ChassisPID extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogGyro smallGyro = RobotMap.chassisPIDgyro;   //Small not NavX Gyro
    private final AHRS gyro = RobotMap.gyro;
    private final PowerDistributionPanel powerDistributionPanel = RobotMap.chassisPIDpowerDistributionPanel;
    private final Encoder rightEncoder = RobotMap.chassisPIDRightEncoder;
    private final Encoder leftEncoder = RobotMap.chassisPIDLeftEncoder;
    private final Ultrasonic ultrasonicSensor = RobotMap.chassisPIDultrasonicSensor;
    private final AnalogAccelerometer accelerometer = RobotMap.chassisPIDaccelerometer;
    private final CANTalon chassisLeft1 = RobotMap.chassisPIDchassisLeft1;
    private final CANTalon chassisLeft2 = RobotMap.chassisPIDchassisLeft2;
    private final CANTalon chassisLeft3 = RobotMap.chassisPIDchassisLeft3;
    private final CANTalon chassisRight1 = RobotMap.chassisPIDchassisRight1;
    private final CANTalon chassisRight2 = RobotMap.chassisPIDchassisRight2;
    private final CANTalon chassisRight3 = RobotMap.chassisPIDchassisRight3;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    RobotDrive robotDrive = RobotMap.chassisDrive;  
    // Initialize your subsystem here
    public ChassisPID() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("ChassisPID", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("ChassisPID", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        RobotMap.chassisPIDchassisLeft1.enableBrakeMode(false);
    	RobotMap.chassisPIDchassisLeft2.enableBrakeMode(false);
    	RobotMap.chassisPIDchassisLeft3.enableBrakeMode(false);
    	
    	RobotMap.chassisPIDchassisRight1.enableBrakeMode(false);
    	RobotMap.chassisPIDchassisRight2.enableBrakeMode(false);
    	RobotMap.chassisPIDchassisRight3.enableBrakeMode(false);
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void initDefaultCommand() {
        
    	setDefaultCommand(new Chassis_TankDrive());
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    public void tankDrive(double leftValue, double rightValue) {
    	robotDrive.tankDrive(leftValue, rightValue, true);
    }
    public void arcadeDrive(double speedValue, double turnValue) {
    	robotDrive.arcadeDrive(speedValue, turnValue, true);
    }
    public void setBrakeMode(boolean type) {
    	RobotMap.chassisPIDchassisLeft1.enableBrakeMode(type);
    	RobotMap.chassisPIDchassisLeft2.enableBrakeMode(type);
    	RobotMap.chassisPIDchassisLeft3.enableBrakeMode(type);
    	
    	RobotMap.chassisPIDchassisRight1.enableBrakeMode(type);
    	RobotMap.chassisPIDchassisRight2.enableBrakeMode(type);
    	RobotMap.chassisPIDchassisRight3.enableBrakeMode(type);
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        
        return driveEncoder.pidGet();

    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        chassisLeft2.pidWrite(output);

    }
    //Reset the encoders
    public void resetEncoders() {
    	LeftEncoder.reset();
    	RightEncoder.reset();
    }
    public int readLeftEncoder() {
    	return (LeftEncoder.get());
    	
    }
    public int readRightEncoder() {
    	return (RightEncoder.get());
    }
    public boolean encoderOnTargetLeft(int target) {
    	return (target > readLeftEncoder());
    }
    public boolean encoderOnTargetRight(int target) {
    	return (target > readRightEncoder());
    }
    
    public double readUltrasonic() {
    	return (ultrasonicSensor.getRangeInches());
    }
    public boolean UltrasonicOnTarget(double target) {
    	return (target > readUltrasonic());
    }
    
    //Reset Gyro
    public void resetGyro() {
    	gyro.reset();
    }
    public double readGyroYaw() {
    	return gyro.getYaw();
    }
    public boolean gyroOnTarget(double targetMin, double targetMax ) {
    	return ((targetMin < gyro.getYaw()) && (gyro.getYaw() < targetMax));
    }      
    public void stopMotors() {
    	RobotMap.chassisDrive.stopMotor();
	}
}
