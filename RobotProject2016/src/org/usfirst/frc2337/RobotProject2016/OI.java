// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2337.RobotProject2016;

import org.usfirst.frc2337.RobotProject2016.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc2337.RobotProject2016.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton driveWithGyro;
    public Joystick driverJoystick;
    public JoystickButton intake;
    public Joystick operatorJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        operatorJoystick = new Joystick(1);
        
        intake = new JoystickButton(operatorJoystick, 1);
        intake.whileHeld(new intake_ActivateMotors(0));
        driverJoystick = new Joystick(0);
        
        driveWithGyro = new JoystickButton(driverJoystick, 1);
        driveWithGyro.whileHeld(new chassis_DriveWithGyro());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("doNothing: fishstar", new doNothing(false, 0L));
        SmartDashboard.putData("intake_ActivateMotors", new intake_ActivateMotors());
        SmartDashboard.putData("chassis_DriveWithGyro", new chassis_DriveWithGyro());
        SmartDashboard.putData("intake_DoNothing", new intake_DoNothing());
        SmartDashboard.putData("PTO_DoNothing", new PTO_DoNothing());
        SmartDashboard.putData("led_DoNothing", new led_DoNothing());
        SmartDashboard.putData("shooterArm_Activate: fullSpeed", new shooterArm_Activate(0));
        SmartDashboard.putData("shooterArm_DoNothing", new shooterArm_DoNothing());
        SmartDashboard.putData("scaler_DoNothing", new scaler_DoNothing());
        SmartDashboard.putData("intake_ActivateLifterMotor", new intake_ActivateLifterMotor());
        SmartDashboard.putData("intakeWrist_Activate", new intakeWrist_Activate());
        SmartDashboard.putData("chassisShifter_activate: activate", new chassisShifter_activate(false));
        SmartDashboard.putData("chassisShifter_activate: fish", new chassisShifter_activate(false));
        SmartDashboard.putData("camera_DoNothing", new camera_DoNothing());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getdriverJoystick() {
        return driverJoystick;
    }

    public Joystick getoperatorJoystick() {
        return operatorJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

